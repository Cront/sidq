"""Updated user schema to have first name, middle name, and last name

Revision ID: b62c23472a3c
Revises: 7592cf734bb2
Create Date: 2025-06-27 01:20:26.994953

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = 'b62c23472a3c'
down_revision = '7592cf734bb2'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Step 1: Add new columns (temporarily nullable)
        batch_op.add_column(sa.Column('first_name', sa.String(length=80), nullable=True))
        batch_op.add_column(sa.Column('middle_name', sa.String(length=160), nullable=True))
        batch_op.add_column(sa.Column('last_name', sa.String(length=80), nullable=True))
    
    # Step 2: Now that columns exist, we can update them
    # Need to use raw SQL here because SQLAlchemy Core doesn't see the new columns yet
    conn = op.get_bind()
    
    # Get all users with their current names
    users = conn.execute(sa.text('SELECT id, name FROM "user"')).fetchall()
    
    for user in users:
        # Split the name into parts
        name_parts = user.name.split()
        first_name = name_parts[0] if len(name_parts) > 0 else ''
        middle_name = ' '.join(name_parts[1:-1]) if len(name_parts) > 2 else None
        last_name = name_parts[-1] if len(name_parts) > 1 else first_name  # fallback to first name if no last name
        
        # Update the user record
        conn.execute(
            sa.text('UPDATE "user" SET first_name=:first, middle_name=:middle, last_name=:last WHERE id=:id').bindparams(
                first=first_name,
                middle=middle_name,
                last=last_name,
                id=user.id
            )
        )
    
    # Step 3: Now alter the columns to be non-nullable
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('first_name', nullable=False)
        batch_op.alter_column('last_name', nullable=False)
        
        # Step 4: Finally drop the old name column
        batch_op.drop_column('name')
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False))
        batch_op.drop_column('last_name')
        batch_op.drop_column('middle_name')
        batch_op.drop_column('first_name')

    # ### end Alembic commands ###
